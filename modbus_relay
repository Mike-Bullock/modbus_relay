#!/usr/bin/env ruby
# https://www.waveshare.com/wiki/Modbus_POE_ETH_Relay
#
# Send commands between containers using pipes
# https://community.home-assistant.io/t/running-commands-on-the-host-without-ssh/510481
# need to chmod a+wr for the fifo pipe after creation
#
#
#
# In Home Assistant
# Add the following to configuration.yaml
# shell_command:
#  some_command: echo some_script > /config/pipes/host_executor_queue
#
# gem install daemons
#
#
require 'digest/crc16_modbus'
require 'socket'
require 'fileutils'
require 'daemons'
require 'logger'

PIPE_DIRECTORY = "/usr/share/hassio/homeassistant/pipes"
PIPE_NAME = PIPE_DIRECTORY + "/host_executor_queue"
RUN_MODE_DAEMON   = 0
RUN_MODE_CONSOLE  = 1

PS_NAME = $0.match('([\w\_\.]+)\Z')[0] # name the daemon based on the this file's name
PID_FILE = "/tmp/#{PS_NAME}.pid"
LOG_FILE = "/var/log/#{PS_NAME}.log"

RELAY_CH1 = 0
RELAY_CH2 = 1
RELAY_CH3 = 2
RELAY_CH4 = 3
RELAY_CH5 = 4
RELAY_CH6 = 5
RELAY_CH7 = 6
RELAY_CH8 = 7
RELAY_CH_ALL = 0xFF
RELAY_BOARD_DISCOVER_UDP_PORT = 1092
RELAY_BOARD_MODBUS_TCP_PORT = 4196

@logger = Logger.new(STDOUT)

def send_message(message, read_timeout_ms = 500)
  # message is array of bytes [0x01, 0x02, etc.]
  sendbuff = message.dup
  crc = Digest::CRC16Modbus.new

  crc.update(message.pack('C*'))
  crc_int = crc.hexdigest.to_i(16) # get integer value of CRC

  # append to sendbuff
  sendbuff << (crc_int & 0x00FF)
  sendbuff << ((crc_int >> 8) & 0x00FF)

  @logger.debug("Sending bytes:  " + sendbuff.map { |n| '0x%02X' % n }.join(" "))

  # encode and send via tcp
  @sock.write(sendbuff.pack('C*'))

  # wait to for read with 500ms timeout
  readbuff = []
  start_time = Time.now
  loop do
    if (Time.now - start_time)*1000.0 > read_timeout_ms
      # timeout after read_timeout_ms
      @logger.warn("Timeout waiting for response")
      return nil
    end
    if !@sock.ready?
      # sleep 10ms is no data on socket.
      sleep 0.01
      next
    end

    # read a single byte and add it to receive buffer
    readbyte = @sock.read(1)
    readbyte = readbyte.unpack("H*").first.to_i(16)
    readbuff << readbyte
    crc = Digest::CRC16Modbus.new
    crc.update(readbuff.pack('C*'))
    
    # the only way we know we have a full response is when the crc passes.
    if crc.hexdigest.to_i(16) == 0
      @logger.debug("Received bytes: " + readbuff.map { |n| '0x%02X' % n }.join(" "))      
      return readbuff
    end
  end

  return nil
end

RELAY_ON = 0xFF
RELAY_OFF = 0x00
RELAY_FLIP = 0x55

def toggle_relay(relay_idx, action)
  sendbuff =  [0x01,
               0x05, 
               0x00,
               relay_idx.to_i,
               action,
               0x00,
            ]
  send_message(sendbuff)
end

def toggle_all_relays(action)
  return toggle_relay(0xFF, action)
end

def pulse_relay(relay_idx, on_ms)
  #Pulses a relay
  pulse_ms = on_ms

  # send to device number of 100 ms counts to keep relay active
  pulse_ticks = pulse_ms / 100
  pulse_time_hex = pulse_ticks.to_s.to_i(16)

  @logger.debug("Pulsing relay #{relay_idx == RELAY_CH_ALL ? 'all' : relay_idx +1} for #{pulse_ms}ms.")

  sendbuff =  [0x01,
               0x05, 
               0x02,
               relay_idx.to_i,
               ((pulse_time_hex >> 8) & 0x00FF),
               (pulse_time_hex & 0x00FF),
            ]
  send_message(sendbuff)
end

def get_sw_version
  sendbuff =  [0x01,
               0x03, # read sr version
               0x80, 0x00, # read sw version
               0x00, 0x01, # fixed
            ]
  send_message(sendbuff)

end

# TODO implement searching for device id
def find_relay_ip(device_id: nil, timeout_ms: 500)
  # there is a UDP broadcast to port 1092 to find relays on the network. 
  # this discover message was found using a packet capture when the Vircom utility
  # is started. 
  discover_msg = "ZL\000\000\344D\312\000\310\fMu\330\fMuU|\350+\244Cu\004\310\fMu\330\fMu\360\350\031\000\324\243?u\333\243?u\265\257\253I\000\351\031\000\324\243?u\333\243?uE\256\253I@\000\000\000\b\000\000\000h\351\031\000)\201@u\310\fMu\330\350\031\000\364\352\031\000)\201@u\377\377\377\377\333\243?u.\243?u\340@\312\000h\351\031\000\330\fMuTCu\004\030\353Lu\340@\312\000\b\000\000\000\v\000\000\000h\351\031\000P\351\031\000\302\244?u\330\fMuh\351\031\000&R\312\000\345\220?urN"
  sock = UDPSocket.new
  sock.setsockopt(Socket::SOL_SOCKET, Socket::SO_BROADCAST, 1)
  sock.send(discover_msg, 0, "255.255.255.255",RELAY_BOARD_DISCOVER_UDP_PORT)
  
  start_time = Time.now
  loop do
    if (Time.now - start_time)*1000.0 > timeout_ms
      # timeout after read_timeout_ms
      sock.close
      return nil, nil
    end

    if !sock.ready?
      # sleep 10ms if no data on socket.
      sleep 0.01
      next
    end

    recv_data = sock.recvfrom(1024)
    
    remote_ip = recv_data[1][2] # return IP address from recvfrom
    data_device_id = begin
      # find device ID
      # there is a lot of improvement to be made here for error checking....that's why in rescue block
      # also a lot of guesswork. 8888888888 was in my packet capture as the delimiter before the 
      # device id (6 bytes, looks like MAC, similar to MAC, but isn't the MAC)
      # Only returns single device ID. work beeds to be done to if multiple relays exist
      # on network

      recv_data[0].force_encoding("iso-8859-1").split("8888888888")[1][0,6]&.unpack('H*')&.first&.upcase
    rescue => e
      nil
    end

    sock.close
    return remote_ip, data_device_id
  end
end

def manage_service(operation)

  # exec_start is full path of current executable, regardless of where it is invoked from
  exec_start = Dir.getwd + "/" + $0.gsub(/^\./, "").gsub(/^\//, "") # remove leading periods and slashes.
  working_directory = File.dirname(exec_start)

  service_name = File.basename(exec_start) # executable name without path
  service_file_name = "#{service_name}.service"
  service_file_path = "/lib/systemd/system/#{service_file_name}"

  service_file_data =<<EOF
[Unit]
Description=Modbus Relay

[Service]
Type=forking
PIDFile=#{PID_FILE}
Restart=on-failure
RestartSec=2
WorkingDirectory=#{working_directory}
ExecStart=#{exec_start}

[Install]
WantedBy=multi-user.target
EOF

  if operation =~ /install/i
    File.write(service_file_path, service_file_data) # copy to /lib/systemd/system
    `systemctl enable #{service_file_name}` # Enable Service
  elsif operation =~ /remove/i
    `systemctl disable #{service_file_name}`
    File.delete(service_file_path)
  elsif operation =~ /start/i
    `systemctl start #{service_file_name}`
  elsif operation =~ /stop/i
    `systemctl stop #{service_file_name}`
  else
    puts "Unknown service operation #{operation}"
  end
end

###############################################################################
# Main Program
###############################################################################

run_mode = RUN_MODE_DAEMON

if ARGV.length == 0
  # daemon mode
elsif ARGV.length > 1 || ARGV[0]  =~ /\?|help/i
  help =<<EOF
  /? or help          This help menu
  console             run program in console (non daemonized) mode
  install             install service
  remove              remove service
  start               start service
  stop                stop service
  kill                kill running daemon
  <no args>           run in daemon/background mode
EOF
  puts help + "\n\n"
  exit 0
elsif ARGV[0] =~ /^(install|remove|start|stop)$/i
  # service oriented operation
  manage_service($1)
  exit 0
elsif ARGV[0] =~ /^console$/i
  run_mode = RUN_MODE_CONSOLE
  @logger.info("Starting Modbus Relay in console mode")
elsif ARGV[0] =~ /^kill$/i
  running_pid = File.read(PID_FILE).strip
  puts "Killing #{running_pid}"
  `kill -9 #{running_pid}`
  exit
else
  puts "Unknown argument: '#{ARGV[0]}'"
end

if File.exist?(PID_FILE)
  running_pid = File.read(PID_FILE).strip

  # see if process is still running. 
  `kill -0 #{running_pid} 1> /dev/null 2> /dev/null`

  if $?.exitstatus == 0
    if run_mode == RUN_MODE_CONSOLE
      @logger.info("Killing existing running pid #{running_pid}")
      `kill -9 #{running_pid}`
    else
      @logger.warn("a #{PS_NAME} process is already running with pid #{running_pid}")
      exit 1
    end
  else # pid file exists, but process is dead
    `rm #{PID_FILE}`
  end
end

unless run_mode == RUN_MODE_CONSOLE
  Daemonize.daemonize(LOG_FILE, PS_NAME)
  @logger.info("Starting Modbus Relay in daemon mode")
end

# write the daemon's pid file
File.open(PID_FILE, 'w') do |f|
  f.write("#{$$}\n")
end
FileUtils.chmod("a+rw", PID_FILE)

# Not needed not, but see if relay board is on the network
relay_ip, device_id = find_relay_ip()
if relay_ip
  @logger.info("Found relay board #{device_id}: #{relay_ip}")
else
  @logger.error("Could not find relay board on network")
end

# Recreate pipes if not exist
FileUtils.mkdir_p(PIPE_DIRECTORY) if !File.directory?(PIPE_DIRECTORY)
FileUtils.chmod("a+wx", PIPE_DIRECTORY) 

# recreate pipe
File.delete(PIPE_NAME) if File.exists?(PIPE_NAME)
File.mkfifo(PIPE_NAME)
FileUtils.chmod("a+rw", PIPE_NAME)

pipe = File.open(PIPE_NAME, "r+") 
while true # main loop
  sleep(0.01)  # 10ms sleep

  begin # rescue loop withim main loop
    FileUtils.touch(PID_FILE)
  
    # https://stackoverflow.com/questions/26794752/ruby-character-wise-io-select
    read_fds = [ pipe ]
    read_fds << $stdin if run_mode == RUN_MODE_CONSOLE

    # Check if pipes have any data
    if (rd,_,_ = IO.select(read_fds, [], [], 0))  # use IO.select to make gets non blocking gets
      # return immediately if nothing to read
      rd = rd[0]
      
      pipe_data = rd.gets()&.strip
      next if pipe_data.empty?
      @logger.info("Received on pipe: #{pipe_data}")

      relay_ip, device_id = find_relay_ip()
      if !relay_ip
        @logger.error("Unable to locate relay board")
        next
      end
      @logger.info("Relay board #{device_id} IP: #{relay_ip}")
      
      @sock = Socket.tcp(relay_ip, RELAY_BOARD_MODBUS_TCP_PORT, connect_timeout: 5)
      # todo if socket can't be established (handled with rescue for now.)    
      
      # TODO determine what to do based on pipe message
      pulse_relay(RELAY_CH1, 250) # pulse first relay ON for 250 ms (upstairs)
      pulse_relay(RELAY_CH2, 250) # pulse second relay ON for 250 ms (downstairs)
      @sock.close
    end
  rescue SystemExit, Interrupt
    @logger.info("Exiting")
    break
  rescue => e
    @logger.error("Exception: #{e.message} ")
    #@logger.error("Backtrace:\n#{e.backtrace.join("\n\t")} ")
    sleep(5) # backoff for 5 seconds while restarting loop. 
  end
end

File.delete(PID_FILE) if File.exist?(PID_FILE)
